#include "stdafx.h"
#include "FFTPreprocessing.h"

void copyVectorToPointerArray(dataSet& vectorIn, double* arrayOut)
{
    int elements = 0;

    dataSetIterator it = vectorIn->begin();

    while (it != vectorIn->end() && elements++ < vectorIn->size())
    {
        arrayOut[elements] = *it;
        ++it;
    }
}

// long = obtainDataFromFile(char*, int*)
// ---
// Reads a file generated by FFMPEG into memory. The data array (in integers)
// is returned via dataOut and the length of the file is returned as a long
//
// This is, unfortunately, separated from obtainDataFromFile because we need
// a way to accurately determine the filesize in order to initialize a data
// array of the correct size. I will look into a way of combining these,
// but right now this is the only way to do it
//
// Performance: O(n)
long calculateDataFileSize(char* fileName, dataSet& data)
{
    // Read the file indicated by Filename argument
    std::ifstream dataFileIn_(fileName, std::ios::binary);

    long counted_ = 0;
    while (dataFileIn_)
    {
        // Get the next line from the FFTW file
        char c;
        dataFileIn_.get(c);

        // If it exists, push it into the dataOut array
        if (dataFileIn_)
        {
            data->push_back( double(c) );
            counted_++;
        }
    }

    // Close the file and then return the filesize
    dataFileIn_.close();
    return counted_;
}

// fftw_complex* =  startFFT (double*, int)
// ---
// Interface with the FFTW FOSS library. Indirectly performs the Fast Fourier
// Transform to the data set of length (int)
dataSet fastFourierTransform(dataSet& data, fftw_plan& fft_plan, double* workingDoubleArray_, fftw_complex* complexResults)
{
    // Allocate memory for the fftw_complex array and working double*
    // Generate a plan for FFTW to execute
    memcpy(workingDoubleArray_, &data->at(0), data->size() * sizeof(double));
    // Execute the plan
    fftw_execute(fft_plan);

   // std::ofstream fftResultsFile("Results.csv");
    vector<double> resultsVector;
    resultsVector.reserve(180);
    dataSet dataOut = std::make_shared<vector<double>>(resultsVector);

    auto frequency = 0.0;
    for(int i=0; i < 180; i++)
    {
        frequency = double(sqrt(complexResults[i][0] * complexResults[i][0] + complexResults[i][1] * complexResults[i][1]));
        dataOut->push_back( frequency );
      //  fftResultsFile << (BOUNDARY_CONVERSION_SCALAR*i - BOUNDARY_CONVERSION_OFFSET) << "," << frequency << endl;
    }


  //  fftResultsFile.close();
    return dataOut;
}

// normalize(double*, int)
// ---
// Takes an array of (int) doubles as the data set, iterates through to find the max
// value, and then normalizes the original data set based on that maximum.
//
// Performance: O(n)
void normalize(dataSet& data)
{
    dataSetIterator it;

    auto maxValue = *std::max_element(data->begin(), data->end());

    for (it = data->begin(); it != data->end(); ++it)
    {
        *it = double(*it / maxValue);
    }
}

// double = hanningMultiplier(int, int)
// ---
// Returns an offset cosine wave of (int) width at a specific index
double hanningMultiplier(int indexOfHanningFunction)
{
    return 0.5 * (1 - cos(2*PI * indexOfHanningFunction / (WINDOW_SIZE-1)) );
}

// applyHanningWindow(int*, double*, int)
// ---
// Takes an array of (int) points in the time domain (int) and applies a Hanning Window
// of specified width. The result is returned through the double* dataOut argument.
// Immediately normalizes the data after the hanning window is applied.
//
// Performance: O(n)
void applyHanningWindow(dataSet& data)
{
    auto index = int(0);
    for (dataSetIterator it = data->begin(); it != data->end(); ++it)
    {
        *it = double(*it * hanningMultiplier(index++));
    }

    normalize(data);
}

// double* = prepareAndExecuteFFT(const int*)
// ---
// Execute the FFT, convert the results from the complex frequency domain to the
// frequency-vs-time spectral domain and then save the results into a debug file.
dataSet prepareAndExecuteFFT(dataSet& data, fftw_plan& fft_plan, double* workingDoubleArray_, fftw_complex* complexResults)
{
    auto maxFrequency = convertFrequencyToInt(MAXIMUM_FREQUENCY_ACCOUNTED);

    // Execute the FFT
    applyHanningWindow(data);
    return fastFourierTransform(data,fft_plan,workingDoubleArray_,complexResults);
}